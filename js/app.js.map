{"version":3,"file":"app.js","sources":["../../__babelHelpers__","controllers/base.js","views/user-login.jsx","controllers/users.js","views/reminders/reminder-item.jsx","views/reminders.jsx","views/microphone.jsx","controllers/reminders.js","lib/common/event-dispatcher.js","lib/wakeword/recogniser.js","lib/speech/recogniser.js","lib/intent-parser.js","lib/speech-controller.js","lib/server/settings.js","lib/server/network.js","lib/server/webpush.js","lib/server/api.js","lib/server/reminders.js","lib/server/index.js","controllers/main.js","app.js"],"sourcesContent":["var babelHelpers = {};\nexport var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\nexport var jsx = function () {\n  var REACT_ELEMENT_TYPE = typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\") || 0xeac7;\n  return function createRawReactElement(type, props, key, children) {\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      props = {};\n    }\n\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = Array(childrenLength);\n\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : '' + key,\n      ref: null,\n      props: props,\n      _owner: null\n    };\n  };\n}();\n\nexport var asyncToGenerator = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            return step(\"next\", value);\n          }, function (err) {\n            return step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\nexport var classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nexport var createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexport var defineEnumerableProperties = function (obj, descs) {\n  for (var key in descs) {\n    var desc = descs[key];\n    desc.configurable = desc.enumerable = true;\n    if (\"value\" in desc) desc.writable = true;\n    Object.defineProperty(obj, key, desc);\n  }\n\n  return obj;\n};\n\nexport var defaults = function (obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n};\n\nexport var defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nexport var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexport var get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nexport var inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nexport var _instanceof = function (left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n};\n\nexport var interopRequireDefault = function (obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n};\n\nexport var interopRequireWildcard = function (obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n};\n\nexport var newArrowCheck = function (innerThis, boundThis) {\n  if (innerThis !== boundThis) {\n    throw new TypeError(\"Cannot instantiate an arrow function\");\n  }\n};\n\nexport var objectDestructuringEmpty = function (obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n};\n\nexport var objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nexport var possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nexport var selfGlobal = typeof global === \"undefined\" ? self : global;\n\nexport var set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nexport var slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexport var slicedToArrayLoose = function (arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    var _arr = [];\n\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n};\n\nexport var taggedTemplateLiteral = function (strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n};\n\nexport var taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nexport var temporalRef = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  } else {\n    return val;\n  }\n};\n\nexport var temporalUndefined = {};\n\nexport var toArray = function (arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n};\n\nexport var toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nbabelHelpers;\n\nexport { _typeof as typeof, _extends as extends, _instanceof as instanceof }","export default class BaseController {\n  constructor(properties) {\n    Object.assign(this, properties || {});\n  }\n\n  main() {\n    throw new Error('Not implemented!');\n  }\n}\n","import React from 'components/react';\n\nexport default class UserLogin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      login: 'mozilla',\n    };\n\n    this.server = props.server;\n\n    this.onChange = this.onChange.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onChange(evt) {\n    const login = evt.target.value;\n    this.setState({ login });\n  }\n\n  onFormSubmit(evt) {\n    evt.preventDefault(); // Avoid redirection to /?.\n\n    this.server.login(this.state.login, 'password')\n      .then(() => {\n        location.hash = 'reminders';\n      });\n  }\n\n  render() {\n    return (\n      <form className=\"user-login\" onSubmit={this.onFormSubmit}>\n        <input value={this.state.login}\n               placeholder=\"Family name\"\n               className=\"user-login__name-field\"\n               onChange={this.onChange}/>\n        <button className=\"user-login__login-button\">\n          <img src=\"css/icons/next.svg\"/>\n        </button>\n      </form>\n    );\n  }\n}\n\nUserLogin.propTypes = {\n  server: React.PropTypes.object.isRequired,\n};\n","import React from 'components/react';\nimport ReactDOM from 'components/react-dom';\n\nimport BaseController from './base';\nimport UserLogin from '../views/user-login';\n\nconst ALLOWED_ACTIONS = ['login', 'logout'];\nconst DEFAULT_ACTION = ALLOWED_ACTIONS[0];\n\nexport default class UsersController extends BaseController {\n  main(action = DEFAULT_ACTION) {\n    if (!ALLOWED_ACTIONS.includes(action)) {\n      console.error(\n        `Bad users route: \"${action}\". Falling back to ${DEFAULT_ACTION}.`\n      );\n      action = DEFAULT_ACTION;\n    }\n\n    switch (action) {\n      case 'login':\n        this.login();\n        break;\n\n      case 'logout':\n        this.logout();\n        break;\n    }\n  }\n\n  login() {\n    ReactDOM.render(\n      React.createElement(UserLogin, { server: this.server }), this.mountNode\n    );\n  }\n\n  logout() {\n    this.server.logout()\n      .then(() => {\n        // Once logged out, we redirect to the login page.\n        location.hash = 'users/login';\n      });\n  }\n}\n","import React from 'components/react';\nimport moment from 'components/moment';\n\nconst COLOURS = ['red', 'orange', 'green', 'blue', 'violet'];\n\nexport default class ReminderItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.reminder = props.reminder;\n  }\n\n  getColour(name = '') {\n    const hash = (string) => {\n      let hash = 0, i, chr, len;\n      if (string.length === 0) {\n        return 0;\n      }\n      for (i = 0, len = string.length; i < len; i++) {\n        chr = string.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n      }\n      return hash;\n    };\n\n    return COLOURS[hash(name) % COLOURS.length];\n  }\n\n  render() {\n    const reminder = this.reminder;\n    const contentClassName = [\n      'reminders__item-content',\n      this.getColour(reminder.recipient.join(' ')),\n    ]\n      .join(' and ');\n\n    return (\n      <li className=\"reminders__item\">\n        <div className=\"reminders__item-time\">\n          <div>{moment(reminder.datetime).format('LT')}</div>\n        </div>\n        <div className={contentClassName}>\n          <h3 className=\"reminders__item-recipient\">\n            {reminder.recipient}\n          </h3>\n          <p className=\"reminders__item-text\">\n            {reminder.content}\n          </p>\n        </div>\n      </li>\n    );\n  }\n}\n\nReminderItem.propTypes = {\n  reminder: React.PropTypes.object.isRequired,\n};\n","import React from 'components/react';\nimport _ from 'components/lodash';\nimport moment from 'components/moment';\n\nimport ReminderItem from './reminders/reminder-item';\n\nexport default class Reminders extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      reminders: [],\n    };\n\n    this.speechController = props.speechController;\n    this.server = props.server;\n\n    moment.locale(navigator.languages || navigator.language || 'en-US');\n  }\n\n  componentDidMount() {\n    this.server.reminders.getAll()\n      .then((reminders) => {\n        reminders = reminders.map((reminder) => ({\n          id: reminder.id,\n          recipient: [reminder.recipient],\n          content: reminder.message,\n          datetime: reminder.due,\n        }));\n\n        this.setState({ reminders });\n      });\n\n    this.speechController.on('wakelistenstart', () => {\n      console.log('wakelistenstart');\n    });\n    this.speechController.on('wakelistenstop', () => {\n      console.log('wakelistenstop');\n    });\n    this.speechController.on('wakeheard', () => {\n      console.log('wakeheard');\n    });\n    this.speechController.on('speechrecognitionstart', () => {\n      console.log('speechrecognitionstart');\n    });\n    this.speechController.on('speechrecognitionstop', () => {\n      console.log('speechrecognitionstop');\n    });\n    this.speechController.on('reminder', (reminder) => {\n      console.log('reminder', reminder);\n      const reminders = this.state.reminders;\n      reminders.push({\n        id: reminders.length,\n        recipient: reminder.users,\n        content: reminder.action,\n        datetime: reminder.time,\n      });\n\n      this.setState({ reminders });\n\n      this.server.reminders.set({\n        recipient: reminder.users.join(' '),\n        message: reminder.action,\n        due: Number(reminder.time),\n      })\n        .then((res) => {\n          console.log(res);\n        })\n        .catch((res) => {\n          console.error(res);\n        });\n    });\n  }\n\n  // @todo Add a different view when there's no reminders:\n  // https://github.com/fxbox/calendar/issues/16\n  render() {\n    let reminders = this.state.reminders;\n\n    // Sort all the reminders chronologically.\n    reminders = reminders.sort((a, b) => {\n      return a.datetime - b.datetime;\n    });\n\n    // Group the reminders by month.\n    reminders = _.groupBy(reminders, (reminder) => {\n      return moment(reminder.datetime).format('YYYY/MM');\n    });\n\n    // For each month, group the reminders by day.\n    Object.keys(reminders).forEach((month) => {\n      reminders[month] = _.groupBy(reminders[month], (reminder) => {\n        return moment(reminder.datetime).format('YYYY/MM/DD');\n      });\n    });\n\n    const reminderNodes = Object.keys(reminders).map((key) => {\n      const month = moment(key, 'YYYY/MM').format('MMMM');\n      const reminderMonth = reminders[key];\n\n      return (\n        <div key={key}>\n          <h2 className=\"reminders__month\">{month}</h2>\n          {Object.keys(reminderMonth).map((key) => {\n            const date = moment(key, 'YYYY/MM/DD');\n            const remindersDay = reminderMonth[key];\n\n            return (\n              <div key={key} className=\"reminders__day\">\n                <div className=\"reminders__day-date\">\n                  <div className=\"reminders__day-mday\">\n                    {date.format('DD')}\n                  </div>\n                  <div className=\"reminders__day-wday\">\n                    {date.format('ddd')}\n                  </div>\n                </div>\n                <ol className=\"reminders__list\">\n                  {remindersDay.map((reminder) => {\n                    return (<ReminderItem key={reminder.id}\n                                          reminder={reminder}\n                    />);\n                  })}\n                </ol>\n              </div>\n            );\n          })}\n        </div>\n      );\n    });\n\n    return (\n      <section className=\"reminders\">\n        {reminderNodes}\n      </section>\n    );\n  }\n}\n\nReminders.propTypes = {\n  speechController: React.PropTypes.object.isRequired,\n  server: React.PropTypes.object.isRequired,\n};\n","import React from 'components/react';\n\nexport default class Microphone extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isListening: false,\n    };\n\n    this.speechController = props.speechController;\n    this.server = props.server;\n    this.bleep = new Audio();\n\n    this.bleep.src = 'media/cue.wav';\n\n    this.speechController.on('wakeheard', () => {\n      this.bleep.pause();\n      this.bleep.currentTime = 0;\n      this.bleep.play();\n      this.setState({ isListening: true });\n    });\n    this.speechController.on('speechrecognitionstop', () => {\n      this.setState({ isListening: false });\n    });\n\n    this.click = this.click.bind(this);\n  }\n\n  click() {\n    if (!this.state.isListening) {\n      this.bleep.pause();\n      this.bleep.currentTime = 0;\n      this.bleep.play();\n      this.setState({ isListening: true });\n      this.speechController.startSpeechRecognition();\n      return;\n    }\n\n    this.setState({ isListening: false });\n    this.speechController.stopSpeechRecognition();\n  }\n\n  render() {\n    if (!this.server.isLoggedIn) {\n      return null;\n    }\n\n    const className = this.state.isListening ? 'listening' : '';\n\n    return (\n      <div className={className} onClick={this.click}>\n        <div className=\"microphone__background\"></div>\n        <img className=\"microphone__icon\" src=\"css/icons/microphone.svg\"/>\n      </div>\n    );\n  }\n}\n\nMicrophone.propTypes = {\n  speechController: React.PropTypes.object.isRequired,\n  server: React.PropTypes.object.isRequired,\n};\n","import React from 'components/react';\nimport ReactDOM from 'components/react-dom';\n\nimport BaseController from './base';\n\nimport Reminders from '../views/reminders';\nimport Microphone from '../views/microphone';\n\nexport default class RemindersController extends BaseController {\n  main() {\n    ReactDOM.render(\n      React.createElement(Reminders, {\n        speechController: this.speechController,\n        server: this.server,\n      }), this.mountNode\n    );\n\n    ReactDOM.render(\n      React.createElement(Microphone, {\n        speechController: this.speechController,\n        server: this.server,\n      }), document.querySelector('.microphone')\n    );\n  }\n}\n","'use strict';\n\n/*\n * This file provides an helper to add custom events to any object.\n *\n * In order to use this functionality with any object consumer should extend\n * target object class with EventDispatcher:\n *\n * class Obj extends EventDispatcher {}\n * const obj = new Obj();\n *\n * A list of events can be optionally provided and it is recommended to do so.\n * If a list is provided then only the events present in the list will be\n * allowed. Using events not present in the list will cause other functions to\n * throw an error:\n *\n * class Obj extends EventDispatcher {\n *   constructor() {\n *     super(['somethinghappened', 'somethingelsehappened']);\n *   }\n * }\n * const obj = new Obj();\n *\n * The object will have five new methods: 'on', 'once', 'off', 'offAll' and\n * 'emit'. Use 'on' to register a new event-handler:\n *\n * obj.on(\"somethinghappened\", function onSomethingHappened() { ... });\n *\n * If the same event-handler is added multiple times then only one will be\n * registered, e.g.:\n *\n * function onSomethingHappened() { ... }\n * obj.on(\"somethinghappened\", onSomethingHappened);\n * obj.on(\"somethinghappened\", onSomethingHappened); // Does nothing\n *\n * Use 'off' to remove a registered listener:\n *\n * obj.off(\"somethinghappened\", onSomethingHappened);\n *\n * Use 'once' to register a one-time event-handler: it will be automatically\n * unregistered after being called.\n *\n * obj.once(\"somethinghappened\", function onSomethingHappened() { ... });\n *\n * And use 'offAll' to remove all registered event listeners for the specified\n * event:\n *\n * obj.offAll(\"somethinghappened\");\n *\n * When used without parameters 'offAll' removes all registered event handlers,\n * this can be useful when writing unit-tests.\n *\n * Finally use 'emit' to send an event to the registered handlers:\n *\n * obj.emit(\"somethinghappened\");\n *\n * An optional parameter can be passed to 'emit' to be passed to the registered\n * handlers:\n *\n * obj.emit(\"somethinghappened\", 123);\n */\n\nconst assertValidEventName = function(eventName) {\n  if (!eventName || typeof eventName !== 'string') {\n    throw new Error('Event name should be a valid non-empty string!');\n  }\n};\n\nconst assertValidHandler = function(handler) {\n  if (typeof handler !== 'function') {\n    throw new Error('Handler should be a function!');\n  }\n};\n\nconst assertAllowedEventName = function(allowedEvents, eventName) {\n  if (allowedEvents && allowedEvents.indexOf(eventName) < 0) {\n    throw new Error(`Event \"${eventName}\" is not allowed!`);\n  }\n};\n\nconst p = Object.freeze({\n  allowedEvents: Symbol('allowedEvents'),\n  listeners: Symbol('listeners'),\n});\n\nexport default class EventDispatcher {\n  constructor(allowedEvents) {\n    if (typeof allowedEvents !== 'undefined' && !Array.isArray(allowedEvents)) {\n      throw new Error('Allowed events should be a valid array of strings!');\n    }\n\n    this[p.listeners] = new Map();\n    this[p.allowedEvents] = allowedEvents;\n  }\n\n  /**\n   * Registers listener function to be executed once event occurs.\n   *\n   * @param {string} eventName Name of the event to listen for.\n   * @param {function} handler Handler to be executed once event occurs.\n   */\n  on(eventName, handler) {\n    assertValidEventName(eventName);\n    assertAllowedEventName(this[p.allowedEvents], eventName);\n    assertValidHandler(handler);\n\n    let handlers = this[p.listeners].get(eventName);\n    if (!handlers) {\n      handlers = new Set();\n      this[p.listeners].set(eventName, handlers);\n    }\n\n    // Set.add ignores handler if it has been already registered.\n    handlers.add(handler);\n  }\n\n  /**\n   * Registers listener function to be executed only first time when event\n   * occurs.\n   *\n   * @param {string} eventName Name of the event to listen for.\n   * @param {function} handler Handler to be executed once event occurs.\n   */\n  once(eventName, handler) {\n    assertValidHandler(handler);\n\n    const once = (parameters) => {\n      this.off(eventName, once);\n\n      handler.call(this, parameters);\n    };\n\n    this.on(eventName, once);\n  }\n\n  /**\n   * Removes registered listener for the specified event.\n   *\n   * @param {string} eventName Name of the event to remove listener for.\n   * @param {function} handler Handler to remove, so it won't be executed\n   * next time event occurs.\n   */\n  off(eventName, handler) {\n    assertValidEventName(eventName);\n    assertAllowedEventName(this[p.allowedEvents], eventName);\n    assertValidHandler(handler);\n\n    const handlers = this[p.listeners].get(eventName);\n    if (!handlers) {\n      return;\n    }\n\n    handlers.delete(handler);\n\n    if (!handlers.size) {\n      this[p.listeners].delete(eventName);\n    }\n  }\n\n  /**\n   * Removes all registered listeners for the specified event.\n   *\n   * @param {string=} eventName Name of the event to remove all listeners for.\n   */\n  offAll(eventName) {\n    if (typeof eventName === 'undefined') {\n      this[p.listeners].clear();\n      return;\n    }\n\n    assertValidEventName(eventName);\n    assertAllowedEventName(this[p.allowedEvents], eventName);\n\n    const handlers = this[p.listeners].get(eventName);\n    if (!handlers) {\n      return;\n    }\n\n    handlers.clear();\n\n    this[p.listeners].delete(eventName);\n  }\n\n  /**\n   * Emits specified event so that all registered handlers will be called\n   * with the specified parameters.\n   *\n   * @param {string} eventName Name of the event to call handlers for.\n   * @param {Object=} parameters Optional parameters that will be passed to\n   * every registered handler.\n   */\n  emit(eventName, parameters) {\n    assertValidEventName(eventName);\n    assertAllowedEventName(this[p.allowedEvents], eventName);\n\n    const handlers = this[p.listeners].get(eventName);\n    if (!handlers) {\n      return;\n    }\n\n    handlers.forEach((handler) => {\n      try {\n        handler.call(this, parameters);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n\n  /**\n   * Checks if there are any listeners that listen for the specified event.\n   *\n   * @param {string} eventName Name of the event to check listeners for.\n   * @returns {boolean}\n   */\n  hasListeners(eventName) {\n    assertValidEventName(eventName);\n    assertAllowedEventName(this[p.allowedEvents], eventName);\n\n    return this[p.listeners].has(eventName);\n  }\n}\n","'use strict';\n\nimport JsSpeechRecognizer from 'components/jsspeechrecognizer';\n\nexport default class WakeWordRecogniser {\n  constructor(options = {}) {\n    const minimumConfidence = options.minimumConfidence || 0.35;\n    const bufferCount = options.bufferCount || 80;\n    const maxVoiceActivityGap = options.maxVoiceActivityGap || 300;\n    const numGroups = options.numGroups || 60;\n    const groupSize = options.groupSize || 5;\n\n    this.recogniser = new JsSpeechRecognizer();\n\n    this.recogniser.keywordSpottingMinimumConfidence = minimumConfidence;\n    this.recogniser.keywordSpottingBufferCount = bufferCount;\n    this.recogniser.keywordSpottingMaxVoiceActivityGap = maxVoiceActivityGap;\n    this.recogniser.numGroups = numGroups;\n    this.recogniser.groupSize = groupSize;\n\n    Object.seal(this);\n  }\n\n  startListening() {\n    return new Promise((resolve) => {\n      this.recogniser.openMic();\n      if (!this.recogniser.isRecording()) {\n        this.recogniser.startKeywordSpottingRecording();\n      }\n\n      resolve();\n    });\n  }\n\n  stopListening() {\n    return new Promise((resolve) => {\n      if (this.recogniser.isRecording()) {\n        this.recogniser.stopRecording();\n      }\n\n      resolve();\n    });\n  }\n\n  loadModel(modelData) {\n    if (this.recogniser.isRecording()) {\n      throw new Error(\n        'Load the model data before listening for wakeword');\n    }\n\n    this.recogniser.model = modelData;\n  }\n\n  setOnKeywordSpottedCallback(fn) {\n    this.recogniser.keywordSpottedCallback = fn;\n  }\n}\n","'use strict';\n\nconst p = Object.freeze({\n  isListening: Symbol('isListening'),\n  recognition: Symbol('recognition'),\n  supportsRecognition: Symbol('supportsRecognition'),\n});\n\nexport default class SpeechRecogniser {\n  constructor() {\n    this[p.isListening] = false;\n\n    const Recognition =\n      window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    const supportsRecognition = !!Recognition;\n\n    this[p.supportsRecognition] = supportsRecognition;\n\n    if (supportsRecognition) {\n      this[p.recognition] = new Recognition();\n    } else {\n      this[p.recognition] = null;\n    }\n\n    Object.seal(this);\n  }\n\n  listenForUtterance() {\n    if (!this[p.supportsRecognition]) {\n      return Promise.reject(\n        new Error('Speech recognition not supported in this browser'));\n    }\n\n    return new Promise((resolve, reject) => {\n      if (this[p.isListening]) {\n        return reject(new Error('Speech recognition is already listening'));\n      }\n\n      this[p.isListening] = true;\n\n      // Not using `addEventListener` here to avoid\n      // `removeEventListener` everytime it's simpler\n      // to just redefine `onresult` to the same effect.\n      this[p.recognition].onresult = (event) => {\n        this[p.recognition].stop();\n        this[p.isListening] = false;\n\n        // Always take first result\n        const result = event.results[0][0];\n\n        return resolve({\n          confidence: result.confidence,\n          utterance: result.transcript,\n        });\n      };\n\n      this[p.recognition].onerror = (error) => {\n        this[p.recognition].stop();\n        this[p.isListening] = false;\n        return reject(error);\n      };\n\n      this[p.recognition].start();\n    });\n  }\n\n  abort() {\n    this[p.recognition].abort();\n    this[p.isListening] = false;\n\n    return Promise.resolve();\n  }\n}\n","'use strict';\n\nimport chrono from 'components/chrono';\n\n/*\nExamples of supported phrases:\nRemind me to pick Sasha from Santa Clara University at 5PM today.\nRemind me that it is picnic day on July 4th.\nRemind us to go to the opera at 7:15pm on 2nd February.\nRemind us to go at my mum's at 11:30am on 31st July.\nRemind everybody to pack their stuff by next Friday 5pm.\nRemind me that every Tuesday night is trash day.\n\nTo add:\nRemind me every Tuesday to take the bin out.\nRemind Guillaume on Thursdays evening to go to his drawing class.\nRemind me that I should prepare my appointment tomorrow morning.\n*/\n\nconst p = Object.freeze({\n  // Properties\n  regexps: Symbol('regexps'),\n\n  // Methods\n  parseUsers: Symbol('parseUsers'),\n  parseAction: Symbol('parseAction'),\n  parseDatetime: Symbol('parseDatetime'),\n  normalise: Symbol('normalise'),\n  init: Symbol('init'),\n  buildRegExp: Symbol('buildRegExp'),\n  splitOnPlaceholders: Symbol('splitOnPlaceholders'),\n  escape: Symbol('escape'),\n});\n\nconst PATTERNS = {\n  en: {\n    patterns: [\n      `Remind [user] to [action] at [time].`,\n      `Remind [user] to [action] on [time].`,\n      `Remind [user] to [action] by [time].`,\n      `Remind [user] at [time] to [action].`,\n      `Remind [user] on [time] to [action].`,\n      `Remind [user] by [time] to [action].`,\n      `Remind [user] that it is [action] on [time].`,\n      `Remind [user] that [time] is [action].`,\n    ],\n    placeholders: {\n      user: '( \\\\S+ | \\\\S+,? and \\\\S+ )',\n      action: '(.+)',\n      time: '(.+)',\n    },\n    // @see http://www.unicode.org/cldr/charts/29/summary/en.html#4\n    punctuation: new RegExp(\n      `[-‐–—,;:!?.…'‘’\"“”()\\\\[\\\\]§@*/&#†‡′″]+$`, 'u'),\n  },\n  fr: {\n    patterns: [\n      `Rappelle [user] de [action] [time].`,\n      `Rappelle [user] d'[action] [time].`,\n      `Rappelle-[user] de [action] [time].`,\n      `Rappelle-[user] d'[action] [time].`,\n    ],\n    placeholders: {\n      user: '( \\\\S+ | \\\\S+ et \\\\S+ )',\n      action: '(.+)',\n      time: '(.+)',\n    },\n    punctuation: new RegExp(\n      `[-‐–—,;:!?.…’\"“”«»()\\\\[\\\\]§@*/&#†‡]+$`, 'u'),\n  },\n  ja: {\n    patterns: [\n      `[time][action]を[user]に思い出させて。`,\n      `[time][user]に[action]を思い出させて。`,\n      `[time][user]は[action]と言うリマインダーを作成して。`,\n    ],\n    placeholders: {\n      user: '(\\\\S+|\\\\S+と\\\\S+)',\n      action: '(.+)',\n      time: '(.+)',\n    },\n    punctuation: new RegExp(\n      `[-‾_＿－‐—―〜・･,，、､;；:：!！?？.．‥…。｡＇‘’\"＂“”(（)）\\\\[［\\\\]］{｛}｝` +\n      `〈〉《》「｢」｣『』【】〔〕‖§¶@＠*＊/／\\＼&＆#＃%％‰†‡′″〃※]+$`, 'u'),\n  },\n};\n\nexport default class IntentParser {\n  constructor(locale = 'en') {\n    this.locale = locale;\n    this[p.regexps] = {};\n    this[p.init]();\n\n    Object.seal(this);\n  }\n\n  parse(phrase = '') {\n    if (!phrase) {\n      return Promise.reject('Empty string.');\n    }\n\n    return new Promise((resolve, reject) => {\n      const successful = this[p.regexps][this.locale].some((pattern) => {\n        if (!pattern.patterns.test(phrase)) {\n          return false;\n        }\n\n        const segments = pattern.patterns.exec(phrase);\n        segments.shift();\n\n        const users = this[p.parseUsers](segments[pattern.placeholders.user]);\n        const action =\n          this[p.parseAction](segments[pattern.placeholders.action]);\n        const time = this[p.parseDatetime](segments[pattern.placeholders.time]);\n\n        if (time === null) {\n          reject('Time could not be parsed.');\n          return false; // Try next patterns.\n        }\n\n        resolve({ users, action, time });\n        return true;\n      });\n\n      if (!successful) {\n        return reject('Unsupported intent format.');\n      }\n    });\n  }\n\n  [p.parseUsers](string = '') {\n    return [string.trim()];\n  }\n\n  [p.parseAction](string = '') {\n    return string.trim();\n  }\n\n  [p.parseDatetime](string = '') {\n    string = string.trim();\n    const datetime = chrono.parseDate(string);\n\n    return datetime;\n  }\n\n  [p.normalise](string = '', locale = this.locale) {\n    // Normalise whitespaces to space.\n    return string\n      .replace(/\\s+/g, ' ')\n      .trim()\n      // Strip punctuations.\n      .replace(PATTERNS[locale].punctuation, '');\n  }\n\n  /**\n   * Build the `regexps` property as an object mapping locale code to list of\n   * patterns and placeholders pairs.\n   */\n  [p.init]() {\n    Object.keys(PATTERNS).forEach((locale) => {\n      this[p.regexps][locale] = PATTERNS[locale].patterns.map((phrase) =>\n        this[p.buildRegExp](locale, phrase, PATTERNS[locale].placeholders));\n    });\n\n    console.log(this[p.regexps]);\n  }\n\n  [p.buildRegExp](locale = 'en', phrase = '', placeholders) {\n    phrase = this[p.normalise](phrase, locale);\n\n    const tokens = this[p.splitOnPlaceholders](phrase);\n    const order = {};\n    let placeholderIndex = 0;\n    let patterns = tokens.map((token) => {\n      if (token.startsWith('[')) {\n        const placeholder = token\n          .substr(1)\n          // Strip trailing `]`.\n          .replace(new RegExp('\\\\]$', 'u'), '');\n\n        // The order of the placeholders can be different depending on the\n        // pattern or language. When we parse a string, we need to match the\n        // regexp captured masks to the placeholder given its position.\n        order[placeholder] = placeholderIndex;\n        placeholderIndex++;\n\n        return placeholders[placeholder];\n      }\n\n      if (token === ' ') {\n        return '\\\\b \\\\b';\n      }\n\n      // Leading and trailing spaces are changed to word boundary.\n      return this[p.escape](token)\n        .replace(new RegExp('^ ', 'u'), '\\\\b')\n        .replace(new RegExp(' $', 'u'), '\\\\b');\n    });\n\n    patterns = new RegExp(`^${patterns.join('')}$`, 'iu');\n\n    return { patterns, placeholders: order };\n  }\n\n  /**\n   * Split the input phrase along the placeholders noted into brackets.\n   * e.g. 'Meet [user] on [time].' => ['Meet ', '[user]', ' on ', '[time]', '.']\n   *\n   * @param {string} phrase\n   * @return {Array.<string>}\n   */\n  [p.splitOnPlaceholders](phrase) {\n    const tokens = [''];\n    let index = 0;\n\n    phrase.split('').forEach((c) => {\n      if (c === '[' && tokens[index] !== '') {\n        index++;\n        tokens[index] = '';\n      }\n\n      tokens[index] += c;\n\n      if (c === ']') {\n        index++;\n        tokens[index] = '';\n      }\n    });\n\n    return tokens;\n  }\n\n  /**\n   * Escape characters to be used inside a RegExp as static patterns.\n   *\n   * @param {string} string\n   * @return {string}\n   */\n  [p.escape](string) {\n    return string\n      .replace(new RegExp('\\\\.', 'gu'), '\\\\.')\n      .replace(new RegExp('\\\\/', 'gu'), '\\\\/')\n      .replace(new RegExp('\\\\(', 'gu'), '\\\\(')\n      .replace(new RegExp('\\\\)', 'gu'), '\\\\)');\n  }\n}\n","'use strict';\n\nimport EventDispatcher from './common/event-dispatcher';\nimport WakeWordRecogniser from './wakeword/recogniser';\nimport SpeechRecogniser from './speech/recogniser';\nimport IntentParser from './intent-parser';\n\nconst p = Object.freeze({\n  // Properties\n  wakewordRecogniser: Symbol('wakewordRecogniser'),\n  wakewordModelUrl: Symbol('wakewordModelUrl'),\n  speechRecogniser: Symbol('speechRecogniser'),\n\n  // Methods\n  initialiseSpeechRecognition: Symbol('initialiseSpeechRecognition'),\n  startListeningForWakeword: Symbol('startListeningForWakeword'),\n  stopListeningForWakeword: Symbol('stopListeningForWakeword'),\n  listenForUtterance: Symbol('listenForUtterance'),\n  handleSpeechRecognitionEnd: Symbol('handleSpeechRecognitionEnd'),\n  intentParser: Symbol('intentParser'),\n});\n\nconst EVENT_INTERFACE = [\n  // Emit when the wakeword is being listened for\n  'wakelistenstart',\n\n  // Emit when the wakeword is no longer being listened for\n  'wakelistenstop',\n\n  // Emit when the wakeword is heard\n  'wakeheard',\n\n  // Emit when the speech recognition engine starts listening\n  // (And _could_ be sending speech over the network)\n  'speechrecognitionstart',\n\n  // Emit when the speech recognition engine returns a recognised phrase\n  'speechrecognitionstop',\n\n  // Emit when an intent is successfully parsed and we have a reminder object.\n  'reminder',\n];\n\nexport default class SpeechController extends EventDispatcher {\n  constructor() {\n    super(EVENT_INTERFACE);\n\n    const wakeWordRecogniser = new WakeWordRecogniser();\n    const speechRecogniser = new SpeechRecogniser();\n    this[p.intentParser] = new IntentParser();\n\n    wakeWordRecogniser.setOnKeywordSpottedCallback(() => {\n      this.emit(EVENT_INTERFACE[2]);\n\n      this.startSpeechRecognition();\n    });\n\n    this[p.wakewordRecogniser] = wakeWordRecogniser;\n    this[p.wakewordModelUrl] = 'data/wakeword_model.json';\n\n    this[p.speechRecogniser] = speechRecogniser;\n\n    Object.seal(this);\n  }\n\n  start() {\n    return this[p.initialiseSpeechRecognition]()\n      .then(this[p.startListeningForWakeword].bind(this));\n  }\n\n  startSpeechRecognition() {\n    return this[p.stopListeningForWakeword]()\n      .then(this[p.listenForUtterance].bind(this))\n      .then(this[p.handleSpeechRecognitionEnd].bind(this))\n      .then(this[p.startListeningForWakeword].bind(this))\n      .catch(this[p.startListeningForWakeword].bind(this));\n  }\n\n  stopSpeechRecognition() {\n    return this[p.speechRecogniser].abort()\n      .then(this[p.startListeningForWakeword].bind(this));\n  }\n\n  [p.initialiseSpeechRecognition]() {\n    return fetch(this[p.wakewordModelUrl])\n      .then((response) => response.json())\n      .then((model) => {\n        this[p.wakewordRecogniser].loadModel(model);\n      });\n  }\n\n  [p.startListeningForWakeword]() {\n    this.emit(EVENT_INTERFACE[0]);\n    return this[p.wakewordRecogniser].startListening();\n  }\n\n  [p.stopListeningForWakeword]() {\n    this.emit(EVENT_INTERFACE[1]);\n    return this[p.wakewordRecogniser].stopListening();\n  }\n\n  [p.listenForUtterance]() {\n    this.emit(EVENT_INTERFACE[3]);\n    return this[p.speechRecogniser].listenForUtterance();\n  }\n\n  [p.handleSpeechRecognitionEnd](result) {\n    this.emit(EVENT_INTERFACE[4], result);\n\n    // Parse intent\n    this[p.intentParser].parse(result.utterance)\n      .then((reminder) => {\n        this.emit(EVENT_INTERFACE[5], reminder);\n      })\n      .catch((err) => {\n        console.error('Error while parsing the sentence:', err);\n        console.error('Sentence was:', result.utterance);\n      });\n  }\n}\n","'use strict';\n\nimport EventDispatcher from '../common/event-dispatcher';\n\n// Prefix all entries to avoid collisions.\nconst PREFIX = 'cue-';\n\nconst ORIGIN = 'https://calendar.knilxof.org';\n\n/**\n * API version to use (currently not configurable).\n * @type {number}\n * @const\n */\nconst API_VERSION = 1;\n\n/**\n * Regex to match upper case literals.\n * @type {RegExp}\n * @const\n */\nconst UPPER_CASE_REGEX = /([A-Z])/g;\n\nconst p = Object.freeze({\n  values: Symbol('values'),\n  storage: Symbol('storage'),\n\n  // Private methods.\n  updateSetting: Symbol('updateSetting'),\n  stringToSettingTypedValue: Symbol('stringToSettingTypedValue'),\n  getDefaultSettingValue: Symbol('getDefaultSettingValue'),\n  onStorage: Symbol('onStorage'),\n});\n\n// Definition of all available settings and their default values (if needed).\nconst settings = Object.freeze({\n  // String settings.\n  SESSION: Object.freeze({ key: 'session' }),\n});\n\nexport default class Settings extends EventDispatcher {\n  constructor(storage = localStorage) {\n    super();\n\n    // Not all browsers have localStorage supported or activated.\n    this[p.storage] = storage || {\n      getItem: () => null,\n      setItem: () => {},\n      removeItem: () => {},\n      clear: () => {},\n    };\n\n    this[p.values] = new Map();\n\n    Object.keys(settings).forEach((settingName) => {\n      const setting = settings[settingName];\n      const settingStringValue = this[p.storage].getItem(\n        `${PREFIX}${setting.key}`\n      );\n\n      // Setting values directly to avoid firing events on startup.\n      this[p.values].set(\n        setting,\n        this[p.stringToSettingTypedValue](setting, settingStringValue)\n      );\n    });\n\n    window.addEventListener('storage', this[p.onStorage].bind(this));\n\n    Object.seal(this);\n  }\n\n  get session() {\n    return this[p.values].get(settings.SESSION);\n  }\n\n  set session(value) {\n    this[p.updateSetting](settings.SESSION, value);\n  }\n\n  // Getters only.\n  get origin() {\n    return ORIGIN;\n  }\n\n  get apiVersion() {\n    return API_VERSION;\n  }\n\n  /**\n   * Iterates through all known settings and sets default value for all of them.\n   *\n   * @return {Promise}\n   */\n  clear() {\n    return new Promise((resolve) => {\n      Object.keys(settings).forEach((settingName) => {\n        const setting = settings[settingName];\n        this[p.updateSetting](setting, this[p.getDefaultSettingValue](setting));\n      });\n      resolve();\n    });\n  }\n\n  /**\n   * Tries to update setting with new value. If value has changed corresponding\n   * event will be emitted. New value is also persisted to the local storage.\n   *\n   * @param {Object} setting Setting description object.\n   * @param {number|boolean|string?} newValue New value for specified setting.\n   * @private\n   */\n  [p.updateSetting](setting, newValue) {\n    const currentValue = this[p.values].get(setting);\n    if (currentValue === newValue) {\n      return;\n    }\n\n    this[p.values].set(setting, newValue);\n\n    if (newValue !== this[p.getDefaultSettingValue](setting)) {\n      this[p.storage].setItem(`${PREFIX}${setting.key}`, newValue);\n    } else {\n      this[p.storage].removeItem(`${PREFIX}${setting.key}`);\n    }\n\n    this.emit(\n      setting.key.replace(UPPER_CASE_REGEX, (part) => `-${part.toLowerCase()}`),\n      newValue\n    );\n  }\n\n  /**\n   * Converts setting raw string value to the typed one depending on the setting\n   * type.\n   *\n   * @param {Object} setting Setting description object.\n   * @param {string?} stringValue Raw string setting value or null.\n   * @return {number|boolean|string|null}\n   * @private\n   */\n  [p.stringToSettingTypedValue](setting, stringValue) {\n    // If string is null, we should return default value for this setting or\n    // default value for setting type.\n    if (stringValue === null) {\n      return this[p.getDefaultSettingValue](setting);\n    } else if (setting.type === 'boolean') {\n      return stringValue === 'true';\n    } else if (setting.type === 'number') {\n      return Number(stringValue);\n    }\n\n    return stringValue;\n  }\n\n  /**\n   * Gets default typed value for the specified setting.\n   *\n   * @param {Object} setting Setting description object.\n   * @return {number|boolean|string|null}\n   * @private\n   */\n  [p.getDefaultSettingValue](setting) {\n    if (setting.defaultValue !== undefined) {\n      return setting.defaultValue;\n    }\n\n    // Default value for this setting is not specified, let's return default\n    // value for setting type (boolean, number or string).\n    if (setting.type === 'boolean') {\n      return false;\n    } else if (setting.type === 'number') {\n      return 0;\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles localStorage \"storage\" event.\n   *\n   * @param {StorageEvent} evt StorageEvent instance.\n   * @private\n   */\n  [p.onStorage](evt) {\n    if (!evt.key.startsWith(PREFIX)) {\n      return;\n    }\n\n    const key = evt.key.substring(PREFIX.length);\n    const settingName = Object.keys(settings).find((settingName) => {\n      return settings[settingName].key === key;\n    });\n\n    if (!settingName) {\n      console.warn(\n        `Changed unknown storage entry with app specific prefix: ${evt.key}`\n      );\n      return;\n    }\n\n    const setting = settings[settingName];\n\n    this[p.updateSetting](\n      setting,\n      this[p.stringToSettingTypedValue](setting, evt.newValue)\n    );\n  }\n}\n","'use strict';\n\nimport EventDispatcher from '../common/event-dispatcher';\n\nconst p = Object.freeze({\n  // Private properties.\n  settings: Symbol('settings'),\n  online: Symbol('online'),\n\n  // Private methods.\n  init: Symbol('init'),\n  fetch: Symbol('fetch'),\n});\n\nexport default class Network extends EventDispatcher {\n  constructor(settings) {\n    super(['online']);\n\n    this[p.settings] = settings;\n    this[p.online] = false;\n\n    Object.seal(this);\n\n    this[p.init]();\n  }\n\n  /**\n   * Attach event listeners related to the connection status.\n   */\n  [p.init]() {\n    this[p.online] = navigator.onLine;\n\n    window.addEventListener('online', (online) => {\n      this[p.online] = online;\n      this.emit('online', online);\n    });\n    window.addEventListener('offline', (online) => {\n      this[p.online] = online;\n      this.emit('online', online);\n    });\n\n    if ('connection' in navigator && 'onchange' in navigator.connection) {\n      navigator.connection.addEventListener('change', () => {\n        const online = navigator.onLine;\n\n        this[p.online] = online;\n        this.emit('online', online);\n      });\n    }\n  }\n\n  get origin() {\n    return this[p.settings].origin;\n  }\n\n  get online() {\n    return this[p.online];\n  }\n\n  /**\n   * Request a JSON from a specified URL.\n   *\n   * @param {string} url The URL to send the request to.\n   * @param {string} method The HTTP method (defaults to \"GET\").\n   * @param {Object} body An object of key/value.\n   * @return {Promise}\n   */\n  fetchJSON(url, method = 'GET', body = undefined) {\n    const accept = 'application/json';\n    return this[p.fetch](url, accept, method, body)\n      .then((response) => {\n        const contentType = response.headers.get('Content-Type') || '';\n        if (response.ok && !contentType.startsWith(accept)) {\n          return;\n        }\n\n        return response.json();\n      });\n  }\n\n  /**\n   * Request a Blob from a specified URL.\n   *\n   * @param {string} url The URL to send the request to.\n   * @param {string} blobType The Blob mime type (eg. image/jpeg).\n   * @param {string=} method The HTTP method (defaults to \"GET\").\n   * @param {Object=} body An object of key/value.\n   * @return {Promise<Blob>}\n   */\n  fetchBlob(url, blobType, method, body) {\n    return this[p.fetch](url, blobType, method, body)\n      .then((response) => response.blob());\n  }\n\n  /**\n   * Request a content of the specified type from a specified URL.\n   *\n   * @param {string} url The URL to send the request to.\n   * @param {string} accept The content mime type (eg. image/jpeg).\n   * @param {string=} method The HTTP method (defaults to \"GET\").\n   * @param {Object=} body An object of key/value.\n   * @return {Promise<Response>}\n   * @private\n   */\n  [p.fetch](url, accept, method = 'GET', body = undefined) {\n    method = method.toUpperCase();\n\n    const req = {\n      method,\n      headers: { Accept: accept },\n      cache: 'no-store',\n    };\n\n    if (this[p.settings].session) {\n      // The user is logged in, we authenticate the request.\n      req.headers.Authorization = `Bearer ${this[p.settings].session}`;\n    }\n\n    if (body !== undefined) {\n      req.headers['Content-Type'] = 'application/json;charset=UTF-8';\n      req.body = JSON.stringify(body);\n    }\n\n    return fetch(url, req)\n      .then((res) => {\n        if (!res.ok) {\n          throw new TypeError(\n            `The response returned a ${res.status} HTTP status code.`\n          );\n        }\n\n        return res;\n      })\n      .catch((error) => {\n        console.error('Error occurred while fetching content: ', error);\n        throw error;\n      });\n  }\n}\n","'use strict';\n\nimport EventDispatcher from '../common/event-dispatcher';\n\n// Private members\nconst p = Object.freeze({\n  // Properties,\n  api: Symbol('api'),\n  settings: Symbol('settings'),\n\n  // Methods:\n  listenForMessages: Symbol('listenForMessages'),\n});\n\nexport default class WebPush extends EventDispatcher {\n  constructor(api, settings) {\n    super(['message']);\n\n    this[p.api] = api;\n    this[p.settings] = settings;\n\n    Object.seal(this);\n  }\n\n  subscribeToNotifications(resubscribe = false) {\n    if (!navigator.serviceWorker) {\n      return Promise.reject('No service worker supported');\n    }\n\n    navigator.serviceWorker.addEventListener('message',\n      this[p.listenForMessages].bind(this));\n\n    return navigator.serviceWorker.ready\n      .then((reg) => {\n        reg.pushManager.getSubscription()\n          .then((existing) => {\n            if (existing && !resubscribe) {\n              // nothing left to do\n              // @todo We should check if we have this subscription on the\n              // server, if not re-register it on calendar's server.\n              // https://github.com/fxbox/calendar/issues/20\n              return;\n            }\n\n            return reg.pushManager.subscribe({ userVisibleOnly: true })\n              .then((subscription) =>\n                this[p.api].post('subscriptions', {\n                  subscription,\n                  title: `Browser ${navigator.userAgent}`,\n                })\n              );\n          }).catch((error) => {\n            if (Notification.permission === 'denied') {\n              throw new Error('Permission request was denied.');\n            }\n\n            console.error('Error while saving subscription ', error);\n            throw new Error(`Subscription error: ${error}`);\n          });\n      });\n  }\n\n  [p.listenForMessages](evt) {\n    const msg = evt.data || {};\n\n    if (!msg.action) {\n      return;\n    }\n\n    this.emit('message', msg);\n  }\n}\n","'use strict';\n\nconst p = Object.freeze({\n  settings: Symbol('settings'),\n  net: Symbol('net'),\n\n  // Private methods.\n  getURL: Symbol('getURL'),\n  onceOnline: Symbol('onceOnline'),\n  onceReady: Symbol('onceReady'),\n  getChannelValues: Symbol('getChannelValues'),\n  updateChannelValue: Symbol('updateChannelValue'),\n});\n\n/**\n * Instance of the API class is intended to abstract consumer from the API\n * specific details (e.g. API base URL and version). It also tracks\n * availability of the network, API host and whether correct user session is\n * established. If any of this conditions is not met all API requests are\n * blocked until it's possible to perform them, so consumer doesn't have to\n * care about these additional checks.\n */\nexport default class API {\n  constructor(net, settings) {\n    this[p.net] = net;\n    this[p.settings] = settings;\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Performs HTTP 'GET' API request and accepts JSON as response.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path.\n   * @return {Promise}\n   */\n  get(path) {\n    return this[p.onceReady]()\n      .then(() => this[p.net].fetchJSON(this[p.getURL](path)));\n  }\n\n  /**\n   * Performs HTTP 'POST' API request and accepts JSON as response.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path.\n   * @param {Object=} body Optional object that will be serialized to JSON\n   * string and sent as 'POST' body.\n   * @return {Promise}\n   */\n  post(path, body) {\n    console.log(path, body);\n\n    return this[p.onceReady]()\n      .then(() => this[p.net].fetchJSON(this[p.getURL](path), 'POST', body));\n  }\n\n  /**\n   * Performs HTTP 'PUT' API request and accepts JSON as response.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path.\n   * @param {Object=} body Optional object that will be serialized to JSON\n   * string and sent as 'PUT' body.\n   * @return {Promise}\n   */\n  put(path, body) {\n    return this[p.onceReady]()\n      .then(() => this[p.net].fetchJSON(this[p.getURL](path), 'PUT', body));\n  }\n\n  /**\n   * Performs HTTP 'DELETE' API request and accepts JSON as response.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path.\n   * @param {Object=} body Optional object that will be serialized to JSON\n   * string and sent as 'DELETE' body.\n   * @return {Promise}\n   */\n  delete(path, body) {\n    return this[p.onceReady]()\n      .then(() => this[p.net].fetchJSON(this[p.getURL](path), 'DELETE', body));\n  }\n\n  /**\n   * Performs either HTTP 'GET' or 'PUT' (if body parameter is specified) API\n   * request and accepts Blob as response.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path.\n   * @param {Object=} body Optional object that will be serialized to JSON\n   * string and sent as 'PUT' body.\n   * @param {string=} accept Mime type of the Blob we expect as a response\n   * (default is image/jpeg).\n   * @return {Promise}\n   */\n  blob(path, body, accept = 'image/jpeg') {\n    return this[p.onceReady]()\n      .then(() => {\n        if (body) {\n          return this[p.net].fetchBlob(\n            this[p.getURL](path), accept, 'PUT', body\n          );\n        }\n\n        return this[p.net].fetchBlob(this[p.getURL](path), accept);\n      });\n  }\n\n  /**\n   * Creates a fully qualified API URL based on predefined base origin, API\n   * version and specified resource path.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path and version.\n   * @return {string}\n   * @private\n   */\n  [p.getURL](path) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('Path should be a valid non-empty string.');\n    }\n\n    return `${this[p.net].origin}/api/v${this[p.settings].apiVersion}/${path}`;\n  }\n\n  /**\n   * Returns a promise that is resolved once API is ready to use (API host is\n   * online).\n   * In the future we can add more checks like:\n   * * User is authenticated\n   * * Document is visible\n   *\n   * @returns {Promise}\n   * @private\n   */\n  [p.onceReady]() {\n    return Promise.all([\n      this[p.onceOnline](),\n    ]);\n  }\n\n  /**\n   * Returns a promise that is resolved once API host is discovered and online.\n   *\n   * @returns {Promise}\n   * @private\n   */\n  [p.onceOnline]() {\n    const net = this[p.net];\n    if (net.online) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve) => net.once('online', () => resolve()));\n  }\n}\n","'use strict';\n\nconst p = Object.freeze({\n  api: Symbol('api'),\n  settings: Symbol('settings'),\n});\n\nexport default class Reminders {\n  constructor(api, settings) {\n    this[p.api] = api;\n    this[p.settings] = settings;\n\n    Object.seal(this);\n  }\n\n  /**\n   * Retrieves the list of the reminders.\n   *\n   * @return {Promise<Array>} A promise that resolves with an array of objects.\n   */\n  getAll() {\n    return this[p.api].get('reminders');\n  }\n\n  /**\n   * Gets a reminder given its id.\n   *\n   * @param {string} id Id of the reminder to retrieve.\n   * @return {Promise}\n   */\n  get(id) {\n    return this[p.api].get(`reminders/${id}`);\n  }\n\n  /**\n   * Create a new reminder.\n   *\n   * @param {Object} body\n   * @returns {Promise}\n   */\n  set(body) {\n    return this[p.api].post(`reminders`, body);\n  }\n}\n","/* global URLSearchParams */\n\n'use strict';\n\nimport EventDispatcher from '../common/event-dispatcher';\n\nimport Settings from './settings';\nimport Network from './network';\nimport WebPush from './webpush';\nimport API from './api';\nimport Reminders from './reminders';\n\n// Private members.\nconst p = Object.freeze({\n  // Private properties.\n  settings: Symbol('settings'),\n  net: Symbol('net'),\n  webPush: Symbol('webPush'),\n  api: Symbol('api'),\n});\n\nexport default class Server extends EventDispatcher {\n  constructor({ settings, net } = {}) {\n    super(['online']);\n\n    // Private properties.\n    this[p.settings] = settings || new Settings();\n    this[p.net] = net || new Network(this[p.settings]);\n    this[p.api] = new API(this[p.net], this[p.settings]);\n    this[p.webPush] = new WebPush(this[p.api], this[p.settings]);\n\n    // Init\n    this.reminders = new Reminders(this[p.api], this[p.settings]);\n\n    this[p.net].on('online', (online) => this.emit('online', online));\n    this[p.webPush].on('message', (msg) => this.emit('push-message', msg));\n\n    window.server = this;\n\n    Object.seal(this);\n  }\n\n  /**\n   * Clear all data/settings stored on the browser. Use with caution.\n   *\n   * @param {boolean} ignoreServiceWorker\n   * @return {Promise}\n   */\n  clear(ignoreServiceWorker = true) {\n    const promises = [this[p.settings].clear()];\n\n    if (!navigator.serviceWorker && !ignoreServiceWorker) {\n      promises.push(navigator.serviceWorker.ready\n        .then((registration) => registration.unregister()));\n    }\n\n    return Promise.all(promises);\n  }\n\n  get online() {\n    return this[p.net].online;\n  }\n\n  get isLoggedIn() {\n    return !!this[p.settings].session;\n  }\n\n  /**\n   * Authenticate a user.\n   *\n   * @param {string} user\n   * @param {string} password\n   * @return {Promise}\n   */\n  login(user, password) {\n    return this[p.api].post('login', { user, password })\n      .then((res) => {\n        this[p.settings].session = res.token;\n      });\n  }\n\n  /**\n   * Log out the user.\n   *\n   * @return {Promise}\n   */\n  logout() {\n    this[p.settings].session = null;\n    return Promise.resolve();\n  }\n\n  /**\n   * Ask the user to accept push notifications from the server.\n   * This method will be called each time that we log in, but will stop the\n   * execution if we already have the push subscription information.\n   *\n   * @param {boolean} resubscribe Parameter used for testing purposes, and\n   * follow the whole subscription process even if we already have a push\n   * subscription information.\n   * @return {Promise}\n   */\n  subscribeToNotifications(resubscribe = false) {\n    if (!this.isLoggedIn) {\n      return Promise.reject(new Error(\n        'Error while subscribing to push notifications: user is not logged in'\n      ));\n    }\n    return this[p.webPush].subscribeToNotifications(resubscribe);\n  }\n}\n","import BaseController from './base';\nimport UsersController from './users';\nimport RemindersController from './reminders';\n\nimport SpeechController from '../lib/speech-controller';\nimport Server from '../lib/server/index';\n\nconst p = Object.freeze({\n  controllers: Symbol('controllers'),\n  speechController: Symbol('speechController'),\n  server: Symbol('server'),\n\n  onHashChanged: Symbol('onHashChanged'),\n});\n\nexport default class MainController extends BaseController {\n  constructor() {\n    super();\n\n    const mountNode = document.querySelector('.app-view-container');\n    const speechController = new SpeechController();\n    const server = new Server();\n    const options = { mountNode, speechController, server };\n\n    const usersController = new UsersController(options);\n    const remindersController = new RemindersController(options);\n\n    this[p.controllers] = {\n      '': usersController,\n      'users/(.+)': usersController,\n      'reminders': remindersController,\n    };\n\n    this[p.speechController] = speechController;\n    this[p.server] = server;\n\n    window.addEventListener('hashchange', this[p.onHashChanged].bind(this));\n  }\n\n  main() {\n    if (screen && 'orientation' in screen && 'lock' in screen.orientation) {\n      screen.orientation.lock('landscape')\n        .catch((e) => {\n          console.error(e);\n        });\n    }\n\n    this[p.speechController].start()\n      .then(() => {\n        console.log('Speech controller started');\n      });\n\n    this[p.server].subscribeToNotifications()\n      .catch((err) => {\n        console.error('Error while subscribing to notifications:', err);\n      });\n\n    location.hash = '';\n\n    setTimeout(() => {\n      if (this[p.server].isLoggedIn) {\n        location.hash = 'reminders';\n      } else {\n        location.hash = 'users/login';\n      }\n    });\n  }\n\n  /**\n   * Handles hash change event and routes to the right controller.\n   *\n   * @private\n   */\n  [p.onHashChanged]() {\n    const route = window.location.hash.slice(1);\n\n    for (const routeName of Object.keys(this[p.controllers])) {\n      const match = route.match(new RegExp(`^${routeName}$`));\n      if (match) {\n        this[p.controllers][routeName].main(...match.slice(1));\n        break;\n      }\n    }\n  }\n}\n","import MainController from './controllers/main';\n\nconst mainController = new MainController();\nmainController.main();\n"],"names":["jsx","REACT_ELEMENT_TYPE","Symbol","type","props","key","children","defaultProps","childrenLength","arguments","length","propName","childArray","Array","i","$$typeof","undefined","ref","_owner","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","descriptor","enumerable","configurable","writable","Object","defineProperty","protoProps","staticProps","prototype","inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","possibleConstructorReturn","self","call","ReferenceError","toConsumableArray","arr","isArray","arr2","from","BaseController","properties","assign","this","main","Error","UserLogin","_React$Component","state","server","onChange","_this","bind","onFormSubmit","evt","login","setState","preventDefault","then","hash","render","React","Component","ALLOWED_ACTIONS","DEFAULT_ACTION","UsersController","action","includes","error","logout","createElement","mountNode","COLOURS","ReminderItem","reminder","getColour","name","string","chr","len","charCodeAt","contentClassName","recipient","join","moment","datetime","format","content","Reminders","speechController","locale","navigator","languages","language","componentDidMount","reminders","getAll","map","id","message","due","on","log","_this2","push","users","time","set","Number","res","sort","a","b","_","groupBy","keys","forEach","month","reminderNodes","reminderMonth","date","remindersDay","Microphone","bleep","Audio","src","pause","currentTime","play","isListening","click","stopSpeechRecognition","startSpeechRecognition","isLoggedIn","className","RemindersController","document","querySelector","assertValidEventName","eventName","assertValidHandler","handler","assertAllowedEventName","allowedEvents","indexOf","p","freeze","EventDispatcher","listeners","Map","handlers","get","Set","add","once","parameters","off","size","offAll","clear","emit","hasListeners","has","WakeWordRecogniser","options","minimumConfidence","bufferCount","maxVoiceActivityGap","numGroups","groupSize","recogniser","JsSpeechRecognizer","keywordSpottingMinimumConfidence","keywordSpottingBufferCount","keywordSpottingMaxVoiceActivityGap","seal","startListening","Promise","resolve","openMic","isRecording","startKeywordSpottingRecording","stopListening","stopRecording","loadModel","modelData","model","setOnKeywordSpottedCallback","fn","keywordSpottedCallback","SpeechRecogniser","Recognition","window","SpeechRecognition","webkitSpeechRecognition","supportsRecognition","recognition","listenForUtterance","reject","onresult","event","stop","result","results","confidence","transcript","onerror","start","abort","PATTERNS","RegExp","IntentParser","regexps","init","parse","phrase","successful","some","pattern","patterns","test","segments","exec","shift","parseUsers","placeholders","user","parseAction","parseDatetime","trim","chrono","parseDate","normalise","replace","punctuation","buildRegExp","tokens","splitOnPlaceholders","order","placeholderIndex","token","startsWith","placeholder","substr","_this3","escape","index","split","c","EVENT_INTERFACE","SpeechController","_EventDispatcher","wakeWordRecogniser","speechRecogniser","intentParser","wakewordRecogniser","wakewordModelUrl","initialiseSpeechRecognition","startListeningForWakeword","stopListeningForWakeword","handleSpeechRecognitionEnd","fetch","response","json","utterance","err","PREFIX","ORIGIN","API_VERSION","UPPER_CASE_REGEX","settings","Settings","storage","localStorage","values","settingName","setting","settingStringValue","getItem","stringToSettingTypedValue","addEventListener","onStorage","updateSetting","getDefaultSettingValue","newValue","currentValue","setItem","removeItem","part","toLowerCase","stringValue","defaultValue","substring","find","warn","SESSION","Network","online","onLine","connection","fetchJSON","url","method","body","accept","contentType","headers","ok","fetchBlob","blobType","blob","toUpperCase","req","Accept","session","Authorization","JSON","stringify","status","origin","WebPush","api","subscribeToNotifications","resubscribe","serviceWorker","listenForMessages","ready","reg","pushManager","getSubscription","existing","subscribe","userVisibleOnly","subscription","post","userAgent","Notification","permission","msg","data","API","net","path","onceReady","getURL","put","_this4","_this5","apiVersion","all","onceOnline","Server","webPush","ignoreServiceWorker","promises","registration","unregister","password","MainController","_BaseController","usersController","remindersController","controllers","onHashChanged","screen","orientation","lock","e","route","location","slice","routeName","match","mainController"],"mappings":"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","sourceRoot":"/source/"}